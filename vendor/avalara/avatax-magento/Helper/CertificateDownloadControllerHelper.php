<?php
/**
 * ClassyLlama_AvaTax
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @copyright  Copyright (c) 2018 Avalara, Inc.
 * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */

namespace ClassyLlama\AvaTax\Helper;

use Magento\Framework\Exception\NotFoundException;

class CertificateDownloadControllerHelper
{
    /**
     * @var \Magento\Framework\App\RequestInterface
     */
    protected $request;

    /**
     * @var UrlSigner
     */
    protected $urlSigner;

    /**
     * @var \Magento\Customer\Api\CustomerRepositoryInterface
     */
    protected $customerRepository;

    /**
     * @var \ClassyLlama\AvaTax\Api\RestCustomerInterface
     */
    protected $customerRest;

    /**
     * @var \Magento\Framework\DataObjectFactory
     */
    protected $dataObjectFactory;

    /**
     * @var \Magento\Framework\Controller\Result\RawFactory
     */
    protected $resultRawFactory;

    /**
     * @param \Magento\Framework\App\RequestInterface           $request
     * @param UrlSigner                                         $urlSigner
     * @param \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository
     * @param \ClassyLlama\AvaTax\Api\RestCustomerInterface     $customerRest
     * @param \Magento\Framework\Controller\Result\RawFactory   $resultRawFactory
     * @param \Magento\Framework\DataObjectFactory              $dataObjectFactory
     */
    public function __construct(
        \Magento\Framework\App\RequestInterface $request,
        UrlSigner $urlSigner,
        \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository,
        \ClassyLlama\AvaTax\Api\RestCustomerInterface $customerRest,
        \Magento\Framework\Controller\Result\RawFactory $resultRawFactory,
        \Magento\Framework\DataObjectFactory $dataObjectFactory
    )
    {
        $this->request = $request;
        $this->urlSigner = $urlSigner;
        $this->customerRepository = $customerRepository;
        $this->customerRest = $customerRest;
        $this->dataObjectFactory = $dataObjectFactory;
        $this->resultRawFactory = $resultRawFactory;
    }

    /**
     * @return \Magento\Framework\Controller\Result\Raw
     * @throws NotFoundException
     * @throws \Magento\Framework\Exception\LocalizedException
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getDownloadRawResult()
    {
        $customerId = $this->request->getParam('customer_id');
        $certificateId = $this->request->getParam('certificate_id');
        $expires = (int)$this->request->getParam('expires');
        $signature = null;
        $storeId = null;

        $parameters = $this->request->getParams();

        if (isset($parameters['signature'])) {
            $signature = $parameters['signature'];
            unset($parameters['signature']);
        }

        unset($parameters['_nosecret']);

        // Ensure that this was a valid request generated by the system
        if (time() > $expires || $signature !== $this->urlSigner->signParameters($parameters)) {
            throw new NotFoundException(__('No certificate found'));
        }

        // If we have specified a customer ID, use the store that user is associated with, otherwise default to session
        if ($customerId !== null) {
            $customerModel = $this->customerRepository->getById($customerId);
            $storeId = $customerModel->getStoreId();
        }

        $certificateStream = $this->customerRest->downloadCertificate(
            $this->dataObjectFactory->create(['data' => ['id' => $certificateId]]),
            null,
            $storeId
        );

        $resultRaw = $this->resultRawFactory->create();
        $resultRaw->setHeader('Content-type', 'application/pdf', true)->setHeader(
            'Content-Disposition',
            'inline; filename="certificate.pdf"',
            true
        )->setContents($certificateStream); //set content for download file here

        return $resultRaw;
    }
}